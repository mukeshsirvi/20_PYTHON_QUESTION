Q1. Is Python an object-oriented language? What is object-oriented programming?  
Yes, Python is an object-oriented programming language meaning it can enclose the codes within the objects. The property allows the storage of the data and the method in a single unit called the object. 

Q2. What is a Python module? How is it different from libraries?
A module is a single file (or files) containing functions, definitions, and variables designed to do certain tasks. It is a .py extension file. It can be imported at any time during a session and needs to be imported only once. To import a python module, there are two ways: import or from module_name import.

A library is a collection of reusable functionality of codes that allows us to perform a variety of tasks without having to write the code. A Python library does not have any specific context to it. It loosely refers to a collection of modules. These codes can be used by importing the library and by calling that library’s method (or attribute) with a period(.).


Q3. Name mutable and immutable objects.
The mutability of a data structure is the ability to change the portion of the data structure without having to recreate it. Mutable objects are lists, sets, values in a dictionary.

Immutability is the state of the data structure that cannot be changed after its creation.  Immutable objects are integers, strings, float, bool, tuples, keys of a dictionary.

Q4. What are compound data types and data structures?
The data type that is constructed using simple, primitive, and basic data types are compound data types. Data Structures in Python allow us to store multiple observations. These are lists, tuples, sets, and dictionaries.

Q5. What is the difference between a list and a tuple?  
List:

Lists are enclosed with in square []
Lists are mutable, that is their elements and size can be changed.
Lists are slower than tuples.
Example: [‘A’, 1, ‘i’]
Tuple:

Tuples are enclosed in parentheses ()
Tuples are immutable i.e cannot be edited.
Tuples are faster than lists.
Tuples must be used when the order of the elements of a sequence matters.
Example: (‘Twenty’, 20, ‘XX’)

Q6. What are list and dictionary comprehension? Give an example of each.
Python comprehensions are syntactic constructs providing a way to build a list, dictionary or set based on the existing list, dictionary or set whilst altering or filtering elements.
These are generally more compact and faster than normal functions and loops for creating lists.
Must avoid writing very long comprehensions in one line to ensure that code is user-friendly and to maintain the readability.
Example of List comprehension:

[i for i in range(10,60) if i% 10 == 0]

Output: 10,20,30,40, 50

Example of dictionary comprehension:

keys = [‘i’, ‘ii’ ,’iii’, ‘iv’]   

values = [‘this’,’month’,’is’,’March’] 

d = {i:j for (i,j) in zip(keys, values)}   

print (d) 

Output: {‘i’: ‘this’, ‘ii’: ‘month’, ‘iii’: ‘is’, ‘iv’: ‘March’}

Q7. What is tuple unpacking? Why is it important?
A tuple can be unpacked in sense its elements can be separated in the following manner:

Example: We have tuple x = (500, 352)

This tuple x can be assigned to two new variables in this way: a,b = x

Now, printing a and b will result in: print(a) = 500 and print(b) = 352

Tuple unpacking helps to separate each value one at a time. In Machine Learning algorithms, we usually get output as a tuple. Let’s say x = (avg, max), and we want to use these values separately for further analysis then can use the unpacking feature of tuples.

Q8. What are generators and decorators?
A generator is a function returning an iterable or object over which can iterate that is by taking one value at a time. A decorator allows us to modify or alter the functions, methods, and classes.

Q9. What is the difference between %, /, and  //?
% is the modulus operator that returns a remainder after the division.

/ is the operator that returns the quotient after the division.

// is the floor division that rounds off the quotient to the bottom.

Example: 

11 % 2 —> output = 1

11 / 2 —> output = 5.5

11 // 2 —> output = 5

Q10. What is the difference between is and ‘==’ ?
‘==’ checks for equality between the variables, and ‘is’ checks for the identity of the variables.

Q11. What is the difference between indexing and slicing?
Indexing is extracting or lookup one or particular values in a data structure, whereas slicing retrieves a sequence of elements.

Q12. What is the lambda function?
Lambda functions are an anonymous or nameless function. 
These functions are called anonymous because they are not declared in the standard manner by using the def  keyword. It doesn’t require the return keyword as well. These are implicit in the function.
The function can have any number of parameters but can have just one statement and return just one value in the form of an expression. They cannot contain commands or multiple expressions. 
An anonymous function cannot be a direct call to print because lambda requires an expression.
Lambda functions have their own local namespace and cannot access variables other than those in their parameter list and those in the global namespace. 
Example: x = lambda i,j: i+j

print(x(7,8))

Output: 15 

Q13. Explain zip() and enumerate() function.
The zip() function takes multiple lists as input and creates those into a single list of tuples. It does so by taking the corresponding elements of each of the lists as a parameter. It continues this process until it finds the pairs of the tuples.

Example:  We have two lists:

l1 = [‘A’, ‘B’,’C’,’D’] and l2 = [50,100, 150, 200].

zip(list1, list2) 

Output: A list of four tuples: [(‘A’,50), (‘B’,100), (’C’,150), (’D’,200)] 

In case the length of the lists is not the same, then the zip() function will not generate the tuples once the list with the shooter length ends. 

The enumerate() function also takes a list as input and creates a list of tuples. However, its output is: the first element of the tuple is the position of that element in the list and the second element of the tuple is the actual value of the element in the list.

In short, enumerate() function assigns an index to each item in an iterable object that can be used to reference the item later. It makes it easier to keep track of the content of an iterable object. It returns (position, value). It can only take one list at a time as an input as it takes the position of all the elements.

Example:

list2 = [“apple”,”ball”,”cat”]

e1 = enumerate(list2)

print(e1)

Output: [(0, ‘apple’), (1, ball’), (2, ‘cat’)]

Q14. How do map, reduce and filter functions work?
Map function applies the given function to all the iterable and returns a new modified list. It applies the same function to each element of a sequence. 

Reduce function applies the same operation to items of a sequence. It uses the result of operations as the first param of the next operation. It returns an item and not a list.

Filter function filters an item out of a sequence. It is used to filter the given iterable (list, sets, tuple) with the help of another function passed as an argument to test all the elements to be true or false. Its output is a filtered list. 

Q15. What is the difference between del(), clear(), remove(),  and pop()?
del(): deletes the with respect to the position of the value. It does not return which value is deleted. It also changes the index towards the right by decreasing one value. It can also be used to delete the entire data structure.
clear(): clears the list.
remove(): it deletes with respect to the value hence can be used if you know which particular value to delete.
pop(): by default removes the last element and also returns back which value is deleted. It is used extensively when we would want to create referencing. In sense, we can store this deleted return value in a variable and use in future.

Q16. What is the difference between range, xrange, and range?
range(): returns a Python list object, which is of integers. It is a function of BASE python.

xrange(): returns a range object.

arange(): is a function in Numpy library. It can return fractional values as well.

Q17. What is the difference between pass, continue and break?
Pass: It is used when you need some block of code syntactically, but you want to skip its execution. This is basically a null operation. Nothing happens when this is executed.

Continue: It allows to skip some part of a loop when some specific condition is met, and the control is transferred to the beginning of the loop. The loop does not terminate but continues with the next iteration.

Break: It allows the loop to terminate when some condition is met, and the control of the program flows to the  statement immediately after the body of the loop. If the break statement is inside a nested loop (the loop inside another loop), then the break statement will terminate the innermost loop.

Q18. What is Regex? List some of the important Regex functions in Python.
Regular Expression or RegEx is a sequence of characters that are used to create search patterns. In Python, the following RegEx functions are mostly used:

match(): it checks for a match only at the beginning of the string.
search(): it locates a substring matching the RegEx pattern anywhere in the string 
sub(): searches for the pattern and replaces with a new value
split(): it is used to split the text by the given RegEx pattern.
findall(): it is used to find all the sub-strings matching the RegEx pattern

Q19. What are namespaces in Python?
A namespace is a naming system that is used to ensure that every object has a unique name. It is like space (for visual purposes, think of this space as a container) is assigned to every variable which is mapped to the object. So, when we call out this variable, this assigned space or container is searched and hence the corresponding object as well. Python maintains a dictionary for this purpose. 

Q20. What is the difference between global and local variables?
Global variables are the ones that are defined and declared outside a function, and we need to use them inside a function. A variable declared inside the function’s body or the local scope is known as a local variable.

